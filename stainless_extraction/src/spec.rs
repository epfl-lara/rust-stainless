use std::convert::TryFrom;
use std::result::Result;

/// Types of spec functions (pre-, postconditions, ...) and some helping
/// implementations.
#[derive(Debug, PartialEq, Eq)]
pub enum SpecType {
  Pre,
  Post,
  Measure,
}

impl SpecType {
  /// Parses the spec type and the name of the function the spec belongs to from
  /// the name of the spec function. If the spec was generated by nesting it
  /// into its parent function, no function name is returned.
  ///
  pub fn parse_spec_type_fn_name(str: &str) -> Option<(SpecType, Option<&str>)> {
    let parts: Vec<&str> = str.split('_').collect();
    match parts.as_slice() {
      ["", "", spec_type, fn_name] => {
        let valid_fn_name = if fn_name.chars().all(char::is_numeric) {
          None
        } else {
          Some(*fn_name)
        };

        SpecType::try_from(*spec_type)
          .ok()
          .map(|sp| (sp, valid_fn_name))
      }
      _ => None,
    }
  }
}

impl TryFrom<&str> for SpecType {
  type Error = ();

  fn try_from(name: &str) -> Result<Self, Self::Error> {
    match name {
      "pre" => Ok(SpecType::Pre),
      "post" => Ok(SpecType::Post),
      "measure" => Ok(SpecType::Measure),
      _ => Err(()),
    }
  }
}

#[cfg(test)]
mod tests {
  use crate::spec::SpecType;

  #[test]
  fn test_parse_spec_type_fn_name() {
    assert_eq!(
      SpecType::parse_spec_type_fn_name("__pre_asdf"),
      Some((SpecType::Pre, Some("asdf")))
    );
    assert_eq!(
      SpecType::parse_spec_type_fn_name("__post_asdf"),
      Some((SpecType::Post, Some("asdf")))
    );
    assert_eq!(
      SpecType::parse_spec_type_fn_name("__measure_asdf"),
      Some((SpecType::Measure, Some("asdf")))
    );

    // Also parse the spec type for nested specs
    assert_eq!(
      SpecType::parse_spec_type_fn_name("__pre_1"),
      Some((SpecType::Pre, None))
    );
    assert_eq!(
      SpecType::parse_spec_type_fn_name("__post_2"),
      Some((SpecType::Post, None))
    );
    assert_eq!(
      SpecType::parse_spec_type_fn_name("__measure_123"),
      Some((SpecType::Measure, None))
    );

    assert_eq!(SpecType::parse_spec_type_fn_name("_pre_asdf"), None);
    assert_eq!(SpecType::parse_spec_type_fn_name("___pre_asdf"), None);
    assert_eq!(SpecType::parse_spec_type_fn_name("__pr_asdf"), None);

    assert_eq!(SpecType::parse_spec_type_fn_name("__pre__asdf"), None);
  }
}
